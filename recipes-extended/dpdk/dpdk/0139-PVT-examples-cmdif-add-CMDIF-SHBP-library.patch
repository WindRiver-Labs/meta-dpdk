From d91f7aff67222b33c7fa668103437c3b796f9e21 Mon Sep 17 00:00:00 2001
From: Nipun Gupta <nipun.gupta@nxp.com>
Date: Mon, 19 Feb 2018 12:46:43 +0530
Subject: [PATCH 139/166] PVT: examples/cmdif: add CMDIF SHBP library

This code has been taken from the FLIb provided by AIOPSL:
'https://bitbucket.sw.nxp.com/projects/DPAA2/repos/
aiopsl/browse?at=refs%2Fheads%2Fdevelop'

Signed-off-by: Nipun Gupta <nipun.gupta@nxp.com>
---
 doc/api/doxy-api-index.md          |   1 +
 doc/api/doxy-api.conf              |   6 +-
 examples/cmdif/lib/Makefile        |   2 +
 examples/cmdif/lib/shbp/fsl_shbp.h | 129 ++++++++++++++++++++++
 examples/cmdif/lib/shbp/shbp.c     | 218 +++++++++++++++++++++++++++++++++++++
 examples/cmdif/lib/shbp/shbp.h     |  81 ++++++++++++++
 6 files changed, 435 insertions(+), 2 deletions(-)
 create mode 100644 examples/cmdif/lib/shbp/fsl_shbp.h
 create mode 100644 examples/cmdif/lib/shbp/shbp.c
 create mode 100644 examples/cmdif/lib/shbp/shbp.h

diff --git a/doc/api/doxy-api-index.md b/doc/api/doxy-api-index.md
index 98f7751c7e1a..382bf101d9ce 100644
--- a/doc/api/doxy-api-index.md
+++ b/doc/api/doxy-api-index.md
@@ -66,6 +66,7 @@ The public API headers are grouped by topics:
   [dpaa2_cmdif]        (@ref rte_pmd_dpaa2_cmdif.h),
   [dpaa2_cmdif_client] (@ref fsl_cmdif_client.h),
   [dpaa2_cmdif_server] (@ref fsl_cmdif_server.h),
+  [dpaa2_cmdif_shbp]   (@ref fsl_shbp.h),
   [crypto_scheduler]   (@ref rte_cryptodev_scheduler.h)
 
 - **memory**:
diff --git a/doc/api/doxy-api.conf b/doc/api/doxy-api.conf
index 44893ab20992..4e4dc8669f02 100644
--- a/doc/api/doxy-api.conf
+++ b/doc/api/doxy-api.conf
@@ -81,11 +81,13 @@ INPUT                   = doc/api/doxy-api-index.md \
                           lib/librte_timer \
                           lib/librte_vhost \
                           examples/cmdif/lib/client \
-                          examples/cmdif/lib/server
+                          examples/cmdif/lib/server \
+                          examples/cmdif/lib/shbp
 FILE_PATTERNS           = rte_*.h \
                           cmdline.h \
                           fsl_cmdif_client.h \
-                          fsl_cmdif_server.h
+                          fsl_cmdif_server.h \
+                          fsl_shbp.h
 PREDEFINED              = __DOXYGEN__ \
                           __attribute__(x)=
 
diff --git a/examples/cmdif/lib/Makefile b/examples/cmdif/lib/Makefile
index c607410aa165..d28badfca21e 100644
--- a/examples/cmdif/lib/Makefile
+++ b/examples/cmdif/lib/Makefile
@@ -25,12 +25,14 @@ SRCS-y += client/cmdif_client_flib.c
 SRCS-y += client/cmdif_client_gpp.c
 SRCS-y += server/cmdif_srv_flib.c
 SRCS-y += server/cmdif_srv_gpp.c
+SRCS-y += shbp/shbp.c
 
 CFLAGS += -O3
 CFLAGS += $(WERROR_FLAGS)
 CFLAGS += -I$(RTE_SDK)/examples/cmdif/lib
 CFLAGS += -I$(RTE_SDK)/examples/cmdif/lib/client
 CFLAGS += -I$(RTE_SDK)/examples/cmdif/lib/server
+CFLAGS += -I$(RTE_SDK)/examples/cmdif/lib/shbp
 
 LDLIBS += -lrte_eal
 LDLIBS += -lrte_rawdev
diff --git a/examples/cmdif/lib/shbp/fsl_shbp.h b/examples/cmdif/lib/shbp/fsl_shbp.h
new file mode 100644
index 000000000000..67e9f4c6680c
--- /dev/null
+++ b/examples/cmdif/lib/shbp/fsl_shbp.h
@@ -0,0 +1,129 @@
+/* SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0)
+ * Copyright 2015 Freescale Semiconductor Inc.
+ */
+
+#ifndef __FSL_SHBP_H__
+#define __FSL_SHBP_H__
+
+/**
+ * @file
+ *
+ * Shared Buffer Pool (b/w GPP and AIOP) API's for GPP.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <stdint.h>
+
+/** GPP is the allocation master */
+#define SHBP_GPP_MASTER		0x1
+
+/**
+ * This is an internal DPAA2 SHBP structure, not required
+ * to be known to the user.
+ */
+struct shbp;
+
+/**
+ * Calculator for 'mem_ptr' size for shbp_create(). num_bufs must
+ * be 2^x and higher than 8.
+ *
+ * @param num_bufs
+ *   Number of buffers which will be added into the
+ *   SHBP pool. num_bufs must be 2^x and higher than 8.
+ *
+ * @returns
+ *   - The 'mem_ptr' size required by shbp_create()
+ *   - <0 in case of error
+ */
+uint64_t shbp_mem_ptr_size(uint32_t num_bufs);
+
+/**
+ * Get buffer from shared pool
+ *
+ * @param bp
+ *   Buffer pool handle
+ *
+ * @returns
+ *   - Address on Success
+ *   - NULL for error
+ */
+void *shbp_acquire(struct shbp *bp);
+
+/**
+ * Return or add buffer into the shared pool
+ *
+ * @param bp
+ *   Buffer pool handle
+ * @param buf
+ *   Pointer to buffer
+ *
+ * @returns
+ *   - 0: Success.
+ *   - <0: Error code.
+ */
+int shbp_release(struct shbp *bp, void *buf);
+
+/**
+ * Create shared pool from a given buffer
+ *
+ * The shared pool is created as empty, use shbp_release() to fill it
+ *
+ * @param mem_ptr
+ *   Pointer to memory to be used for shared management;
+ *   it should be aligned to cache line
+ * @param size
+ *   Size of mem_ptr
+ * @param flags
+ *   Flags to be used for pool creation, 0 means AIOP is the allocation master.
+ *   See #SHBP_GPP_MASTER.
+ * @param bp
+ *   Pointer to shared pool handle. This is an out parameter.
+ *
+ * @returns
+ *   - 0: Success.
+ *   - <0: Error code.
+ */
+int shbp_create(void *mem_ptr,
+		uint32_t size,
+		uint32_t flags,
+		struct shbp **bp);
+
+/**
+ * Move free buffers into allocation queue
+ *
+ * @param bp
+ *   Buffer pool handle
+ *
+ * @returns
+ *   - 0: number of the buffers added to the allocation queue.
+ *   - <0: Error code.
+ */
+int shbp_refill(struct shbp *bp);
+
+
+/**
+ * Returns the pointers from pool that need to be freed upon pool destruction
+ *
+ * Pointer to struct shbp will not be returned by shbp_destroy() but it
+ * must be freed by user
+ *
+ * @param bp
+ *   Buffer pool handle
+ * @param ptr
+ *   Pointer to be freed for pool destruction
+ *
+ * @returns
+ *   - 0: if there are no buffers to be freed.
+ *   - <0: Error code until there are buffers inside shared pool
+ *         that need to be freed.
+ */
+int shbp_destroy(struct shbp *bp, void **ptr);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/examples/cmdif/lib/shbp/shbp.c b/examples/cmdif/lib/shbp/shbp.c
new file mode 100644
index 000000000000..e2890e51f7cc
--- /dev/null
+++ b/examples/cmdif/lib/shbp/shbp.c
@@ -0,0 +1,218 @@
+/* SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0)
+ * Copyright 2015 Freescale Semiconductor Inc.
+ */
+
+#include <fsl_shbp.h>
+#include <shbp.h>
+
+#ifndef IS_ALIGNED
+/* check only 4 last bytes */
+#define IS_ALIGNED(ADDRESS, ALIGNMENT)              \
+	(!(((uint64_t)(ADDRESS)) & (((uint64_t)(ALIGNMENT)) - 1)))
+#endif
+
+/* It is more efficient to copy to cached stack and then process */
+#define COPY_AND_SWAP(LOCAL, SHBP) \
+	do {\
+		(LOCAL) = *(SHBP);\
+		(LOCAL).alloc.base = CPU_TO_LE64((LOCAL).alloc.base);\
+		(LOCAL).alloc.enq = CPU_TO_LE32((LOCAL).alloc.enq);\
+		(LOCAL).alloc.deq = CPU_TO_LE32((LOCAL).alloc.deq);\
+		(LOCAL).free.base = CPU_TO_LE64((LOCAL).free.base);\
+		(LOCAL).free.enq = CPU_TO_LE32((LOCAL).free.enq);\
+		(LOCAL).free.deq = CPU_TO_LE32((LOCAL).free.deq);\
+	} while (0)
+
+uint64_t
+shbp_mem_ptr_size(uint32_t num_bufs)
+{
+	return SHBP_TOTAL_BYTES + (16 * (num_bufs));
+}
+
+static
+uint8_t get_num_of_first_bit(uint32_t num)
+{
+	int i;
+
+	for (i = 0; i < 32; i++) {
+		if (num & (0x80000000 >> i))
+			return (uint8_t)(31 - i);
+	}
+	return 0xff;
+}
+
+static void *
+acquire(struct shbp *bp, struct shbp_q *lq, struct shbp_q *q)
+{
+	uint32_t deq = SHBP_BD_IND(bp, lq->deq); /* mod 2^x */
+	uint64_t buf = (((uint64_t *)SHBP_BUF_TO_PTR(lq->base))[deq]);
+
+	lq->deq++;
+	q->deq = CPU_TO_LE32(lq->deq); /* Must be last */
+
+	return SHBP_BUF_TO_PTR(CPU_TO_LE64(buf));
+}
+
+static void
+release(struct shbp *bp,
+	struct shbp_q *lq,
+	void *buf,
+	struct shbp_q *q)
+{
+	uint32_t enq = SHBP_BD_IND(bp, lq->enq); /* mod 2^x */
+
+	SHBP_BUF_TO_PTR(lq->base)[enq] =
+		CPU_TO_LE64(SHBP_PTR_TO_BUF(buf));
+
+	lq->enq++;
+	q->enq = CPU_TO_LE32(lq->enq); /* Must be last */
+}
+
+int
+shbp_create(void *mem_ptr, uint32_t size, uint32_t flags, struct shbp **_bp)
+{
+	struct shbp *bp;
+	uint32_t ring_size;
+
+#ifdef DEBUG
+	if ((mem_ptr == NULL) || (size == 0))
+		return -EINVAL;
+#endif
+	/* Better to have mem_ptr aligned to cache line */
+	if (!IS_ALIGNED(mem_ptr, 64))
+		return -EINVAL;
+
+	bp = (struct shbp *)mem_ptr;
+	memset(bp, 0, size);
+
+	/*
+	 * 8 bytes for each BD, 2 rings = 2 ^ 4
+	 * bp->size is size = 8 * bp->size because 8 BDs = cache line
+	 * size = 2^bp->size
+	 */
+	ring_size = (size - SHBP_TOTAL_BYTES);
+	ring_size = ring_size >> 4;
+	/* Minimum 8 BDs = 64 bytes */
+	if (ring_size < 8)
+		return -EINVAL;
+
+	bp->max_num = get_num_of_first_bit(ring_size);
+
+	bp->alloc_master = (uint8_t)(flags & SHBP_GPP_MASTER);
+
+	bp->alloc.base = (uint64_t)(((uint8_t *)bp) + SHBP_TOTAL_BYTES);
+	/* Each BD is 8 bytes */
+	bp->free.base  = (uint64_t)(((uint8_t *)bp->alloc.base) +
+		SHBP_SIZE_BYTES(bp));
+
+	bp->alloc.base = SHBP_PTR_TO_BUF((uint8_t *)bp->alloc.base);
+	bp->free.base  = SHBP_PTR_TO_BUF((uint8_t *)bp->free.base);
+	bp->alloc.base = CPU_TO_LE64(bp->alloc.base);
+	bp->free.base  = CPU_TO_LE64(bp->free.base);
+
+#ifdef DEBUG
+	if ((bp->alloc.base == 0) || (bp->free.base == 0))
+		return -EINVAL;
+#endif
+
+	*_bp = bp;
+
+	return 0;
+}
+
+void *
+shbp_acquire(struct shbp *bp)
+{
+	void *buf;
+	struct shbp lbp;
+
+#ifdef DEBUG
+	if (bp == NULL)
+		return NULL;
+#endif
+
+	COPY_AND_SWAP(lbp, bp);
+
+	if (!(lbp.alloc_master & SHBP_GPP_MASTER))
+		return NULL;
+
+	if (SHBP_ALLOC_IS_EMPTY(&lbp))
+		return NULL;
+
+	buf = acquire(&lbp, &lbp.alloc, &bp->alloc);
+
+	return buf;
+}
+
+int
+shbp_release(struct shbp *bp, void *buf)
+{
+	struct shbp lbp;
+
+#ifdef DEBUG
+	if ((buf == NULL) || (bp == NULL))
+		return -EINVAL;
+#endif
+
+	COPY_AND_SWAP(lbp, bp);
+
+	if (SHBP_ALLOC_IS_FULL(&lbp))
+		return -ENOSPC;
+
+	release(&lbp, &lbp.alloc, buf, &bp->alloc);
+
+	return 0;
+}
+
+int
+shbp_refill(struct shbp *bp)
+{
+	void *buf;
+	int count = 0;
+	struct shbp lbp;
+
+#ifdef DEBUG
+	if (bp == NULL)
+		return -EINVAL;
+#endif
+	COPY_AND_SWAP(lbp, bp);
+
+	while (!SHBP_FREE_IS_EMPTY(&lbp) && !SHBP_ALLOC_IS_FULL(&lbp)) {
+		buf = acquire(&lbp, &lbp.free, &bp->free);
+#ifdef DEBUG
+		if (buf == 0)
+			return -EACCES;
+#endif
+		release(&lbp, &lbp.alloc, buf, &bp->alloc);
+		count++;
+	}
+	return count;
+}
+
+int
+shbp_destroy(struct shbp *bp, void **ptr)
+{
+	struct shbp lbp;
+
+#ifdef DEBUG
+	if ((bp == NULL) || (ptr == NULL))
+		return -EINVAL;
+#endif
+
+	COPY_AND_SWAP(lbp, bp);
+
+	/* take all from free */
+	if (!SHBP_FREE_IS_EMPTY(&lbp)) {
+		*ptr = acquire(&lbp, &lbp.free, &bp->free);
+		return -EACCES;
+	}
+
+	/* take all from alloc */
+	if (!SHBP_ALLOC_IS_EMPTY(&lbp)) {
+		*ptr = acquire(&lbp, &lbp.alloc, &bp->alloc);
+		return -EACCES;
+	}
+
+	*ptr = NULL;
+	return 0;
+}
diff --git a/examples/cmdif/lib/shbp/shbp.h b/examples/cmdif/lib/shbp/shbp.h
new file mode 100644
index 000000000000..320e94774b13
--- /dev/null
+++ b/examples/cmdif/lib/shbp/shbp.h
@@ -0,0 +1,81 @@
+/* SPDX-License-Identifier: (BSD-3-Clause OR GPL-2.0)
+ * Copyright 2015 Freescale Semiconductor Inc.
+ */
+
+#ifndef __SHBP_H__
+#define __SHBP_H__
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include <cmdif.h>
+
+#ifndef MODULU_POWER_OF_TWO
+#define MODULU_POWER_OF_TWO(NUM, MOD) \
+	((uint32_t)(NUM) & ((uint32_t)(MOD) - 1))
+#endif
+
+/** Total bytes including the reserved bytes */
+#define SHBP_TOTAL_BYTES \
+	(sizeof(struct shbp) > 64 ? sizeof(struct shbp) : 64)
+
+/** Number of BDs, must be power of 2 */
+#define SHBP_SIZE(BP)		(0x1U << (BP)->max_num)
+
+#define SHBP_ALLOC_IS_FULL(BP)	\
+	(((BP)->alloc.enq - (BP)->alloc.deq) == SHBP_SIZE(BP))
+
+#define SHBP_ALLOC_IS_EMPTY(BP)	\
+	(((BP)->alloc.enq - (BP)->alloc.deq) == 0)
+
+#define SHBP_FREE_IS_FULL(BP) \
+	(((BP)->free.enq - (BP)->free.deq) == SHBP_SIZE(BP))
+
+#define SHBP_FREE_IS_EMPTY(BP)	(((BP)->free.enq - (BP)->free.deq) == 0)
+
+/** Number of bytes */
+#define SHBP_SIZE_BYTES(BP)	(SHBP_SIZE(BP) << 3)
+
+/** Always modulu power of 2 */
+#define SHBP_BD_IND(SHBP, NUM)	(MODULU_POWER_OF_TWO(NUM, SHBP_SIZE((SHBP))))
+
+/** Offset of the BD in BYTES - mod 2^x */
+#define SHBP_BD_OFF(SHBP, NUM)	(SHBP_BD_IND(SHBP, NUM) << 3)
+
+/** Member offset in bytes */
+#define SHBP_MEM_OFF(SHBP, PTR) (uint32_t)((uint8_t *)(PTR) - (uint8_t *)(SHBP))
+
+/**
+ * Structure representing one ring
+ */
+struct shbp_q {
+	/** Base address of the pool */
+	uint64_t base;
+	/** Number of released buffers */
+	uint32_t enq;
+	/** Number of acquired buffers */
+	uint32_t deq;
+};
+
+/**
+ * Structure representing shared buffer pool.
+ * Must reside in non cacheable memory.
+ */
+struct shbp {
+	/** Allocations queue */
+	struct shbp_q alloc;
+	/** Free queue */
+	struct shbp_q free;
+	/** Master of the allocation, must be 1 byte */
+	uint8_t alloc_master;
+	/** Max number of BDs in the pool is 2^max_buf, must be 1 byte */
+	/* See also SHBP_TOTAL_BYTES */
+	uint8_t max_num;
+};
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _SHBP_H__ */
-- 
2.14.3


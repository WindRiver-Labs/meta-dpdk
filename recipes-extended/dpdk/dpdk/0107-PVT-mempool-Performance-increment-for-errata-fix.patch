From 5f0a8a1d42af4ff69ec0116800601933598c8904 Mon Sep 17 00:00:00 2001
From: Nipun Gupta <nipun.gupta@nxp.com>
Date: Fri, 19 Jan 2018 23:09:09 +0530
Subject: [PATCH 107/166] PVT: mempool: Performance increment for errata fix.

Signed-off-by: Alok Makhariya <alok.makhariya@nxp.com>
Signed-off-by: Nipun Gupta <nipun.gupta@nxp.com>
---
 lib/librte_mbuf/rte_mbuf.c       |  3 ++-
 lib/librte_mempool/rte_mempool.c | 28 +++++++++++++++++++++++++++-
 lib/librte_mempool/rte_mempool.h |  5 +++++
 3 files changed, 34 insertions(+), 2 deletions(-)

diff --git a/lib/librte_mbuf/rte_mbuf.c b/lib/librte_mbuf/rte_mbuf.c
index cde202aa36ac..62003373e807 100644
--- a/lib/librte_mbuf/rte_mbuf.c
+++ b/lib/librte_mbuf/rte_mbuf.c
@@ -234,7 +234,8 @@ rte_pktmbuf_pool_create(const char *name, unsigned n,
 
 #ifdef RTE_LIBRTE_DPAA_MEMPOOL
 	if (dpaa_svr_family == SVR_LS1043A_FAMILY)
-		mp->flags |= MEMPOOL_F_CAPA_BLK_ALIGNED_OBJECTS;
+		mp->flags |= MEMPOOL_F_CAPA_BLK_ALIGNED_OBJECTS |
+				MEMPOOL_F_MBUF;
 #endif
 	mp_ops_name = rte_mbuf_best_mempool_ops();
 	ret = rte_mempool_set_ops_byname(mp, mp_ops_name, NULL);
diff --git a/lib/librte_mempool/rte_mempool.c b/lib/librte_mempool/rte_mempool.c
index c3658dcdde2c..68eebace05bb 100644
--- a/lib/librte_mempool/rte_mempool.c
+++ b/lib/librte_mempool/rte_mempool.c
@@ -394,6 +394,9 @@ rte_mempool_populate_iova(struct rte_mempool *mp, char *vaddr,
 	size_t off;
 	struct rte_mempool_memhdr *memhdr;
 	int ret;
+#ifdef RTE_LIBRTE_DPAA_MEMPOOL
+	int idx = 0, change = LS1043_OFFSET_CHANGE_IDX;
+#endif
 
 	/* create the internal ring if not already done */
 	if ((mp->flags & MEMPOOL_F_POOL_CREATED) == 0) {
@@ -453,6 +456,25 @@ rte_mempool_populate_iova(struct rte_mempool *mp, char *vaddr,
 		off = RTE_PTR_ALIGN_CEIL(vaddr, RTE_CACHE_LINE_SIZE) - vaddr;
 
 	while (off + total_elt_sz <= len && mp->populated_size < mp->size) {
+#ifdef RTE_LIBRTE_DPAA_MEMPOOL
+	/* Due to A010022 hardware errata on LS1043, buf size is kept 4K
+	 * (including metadata). This size is completely divisible by our L1
+	 * cache size (32K) which leads to cache collisions of buffer metadata
+	 * (mbuf) and performance drop. To minimize these cache collisions,
+	 * offset of buffer is changed after an interval of 8 and value is
+	 * reversed after 64 buffer.
+	 */
+	if (dpaa_svr_family == SVR_LS1043A_FAMILY &&
+					mp->flags & MEMPOOL_F_MBUF) {
+		if (idx == LS1043_OFFSET_CHANGE_IDX) {
+			change = -change;
+			idx = 0;
+		}
+		if (idx % LS1043_MAX_BUF_IN_CACHE == 0)
+			off += change;
+		idx++;
+	}
+#endif
 		off += mp->header_size;
 		if (iova == RTE_BAD_IOVA)
 			mempool_add_elem(mp, (char *)vaddr + off,
@@ -672,7 +694,11 @@ rte_mempool_populate_default(struct rte_mempool *mp)
 			goto fail;
 		}
 	}
-
+#ifdef RTE_LIBRTE_DPAA_MEMPOOL
+	if (dpaa_svr_family == SVR_LS1043A_FAMILY &&
+			(mp->flags & MEMPOOL_F_MBUF))
+		mp->size -= LS1043_MAX_BUF_OFFSET;
+#endif
 	return mp->size;
 
  fail:
diff --git a/lib/librte_mempool/rte_mempool.h b/lib/librte_mempool/rte_mempool.h
index 540079faaacc..e4db6df9d9a3 100644
--- a/lib/librte_mempool/rte_mempool.h
+++ b/lib/librte_mempool/rte_mempool.h
@@ -294,10 +294,15 @@ struct rte_mempool {
 #define MEMPOOL_F_CAPA_BLK_ALIGNED_OBJECTS 0x0080
 
 #ifdef RTE_LIBRTE_DPAA_MEMPOOL
+#define MEMPOOL_F_MBUF          0x0100 /**< Mbuf Pool */
 #define SVR_LS1043A_FAMILY	0x87920000
 #define SVR_MASK		0xffff0000
 #define LS1043_MAX_BUF_SIZE	3904
 #define LS1043_MAX_MEMZONES	512
+#define LS1043_OFFSET_CHANGE_IDX 64
+#define LS1043_MAX_BUF_IN_CACHE         8
+#define LS1043_MAX_BUF_OFFSET   (LS1043_OFFSET_CHANGE_IDX * \
+		LS1043_MAX_BUF_IN_CACHE)
 extern unsigned int dpaa_svr_family;
 void set_dpaa_svr_family(void);
 #endif
-- 
2.14.3


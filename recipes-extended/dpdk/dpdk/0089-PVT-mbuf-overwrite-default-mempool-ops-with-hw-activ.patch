From ba49c34fe9a8478a7fb083712ebbef586283dc3c Mon Sep 17 00:00:00 2001
From: Hemant Agrawal <hemant.agrawal@nxp.com>
Date: Mon, 11 Dec 2017 18:37:50 +0530
Subject: [PATCH 089/166] PVT: mbuf: overwrite default mempool ops with hw
 active platform pool

This patch allow the hw to register the active platform hw mempool at run time.

Signed-off-by: Hemant Agrawal <hemant.agrawal@nxp.com>
---
 lib/librte_mbuf/rte_mbuf.c           | 38 +++++++++++++++++++++++++++++++++++-
 lib/librte_mbuf/rte_mbuf.h           | 22 +++++++++++++++++++++
 lib/librte_mbuf/rte_mbuf_version.map |  8 ++++++++
 3 files changed, 67 insertions(+), 1 deletion(-)

diff --git a/lib/librte_mbuf/rte_mbuf.c b/lib/librte_mbuf/rte_mbuf.c
index 7543662f7928..9528e5deadfa 100644
--- a/lib/librte_mbuf/rte_mbuf.c
+++ b/lib/librte_mbuf/rte_mbuf.c
@@ -148,6 +148,42 @@ rte_pktmbuf_init(struct rte_mempool *mp,
 	m->next = NULL;
 }
 
+static const char *plat_mbuf_pool_ops_name;
+
+int
+rte_mbuf_register_platform_mempool_ops(const char *ops_name)
+{
+	if (plat_mbuf_pool_ops_name == NULL) {
+		plat_mbuf_pool_ops_name = ops_name;
+		return 0;
+	} else {
+		RTE_LOG(ERR, MBUF,
+			"%s is already registered as platform pktmbuf pool ops\n",
+			plat_mbuf_pool_ops_name);
+		return -EACCES;
+	}
+}
+
+const char *
+rte_mbuf_platform_mempool_ops(void)
+{
+	return plat_mbuf_pool_ops_name;
+}
+
+/* Return mbuf pool ops name */
+static const char *
+rte_mbuf_best_mempool_ops(void)
+{
+	const char *default_ops = rte_eal_mbuf_default_mempool_ops();
+
+	/* if mbuf default ops is same as compile time default */
+	if ((strcmp(default_ops, RTE_MBUF_DEFAULT_MEMPOOL_OPS) == 0) &&
+		(plat_mbuf_pool_ops_name != NULL))
+		return plat_mbuf_pool_ops_name;
+	else
+		return default_ops;
+}
+
 /* helper to create a mbuf pool */
 struct rte_mempool *
 rte_pktmbuf_pool_create(const char *name, unsigned n,
@@ -176,7 +212,7 @@ rte_pktmbuf_pool_create(const char *name, unsigned n,
 	if (mp == NULL)
 		return NULL;
 
-	mp_ops_name = rte_eal_mbuf_default_mempool_ops();
+	mp_ops_name = rte_mbuf_best_mempool_ops();
 	ret = rte_mempool_set_ops_byname(mp, mp_ops_name, NULL);
 	if (ret != 0) {
 		RTE_LOG(ERR, MBUF, "error setting mempool handler\n");
diff --git a/lib/librte_mbuf/rte_mbuf.h b/lib/librte_mbuf/rte_mbuf.h
index 16a6048c2955..27f09b805236 100644
--- a/lib/librte_mbuf/rte_mbuf.h
+++ b/lib/librte_mbuf/rte_mbuf.h
@@ -1095,6 +1095,28 @@ rte_pktmbuf_pool_create(const char *name, unsigned n,
 	unsigned cache_size, uint16_t priv_size, uint16_t data_room_size,
 	int socket_id);
 
+/**
+ * Register the active HW pkt mbuf pool
+ *
+ * Register the platform supported pktmbuf HW pool
+ *
+ * @param pool ops name
+ * @return
+ *   - 0: Success
+ *   - -EACCES: platform mempool is already registered.
+ */
+int
+rte_mbuf_register_platform_mempool_ops(const char *ops_name);
+
+/**
+ * Get registered platform supported pool ops name for mbuf
+ *
+ * @return
+ *   returns default pool ops name.
+ */
+const char*
+rte_mbuf_platform_mempool_ops(void);
+
 /**
  * Get the data room size of mbufs stored in a pktmbuf_pool
  *
diff --git a/lib/librte_mbuf/rte_mbuf_version.map b/lib/librte_mbuf/rte_mbuf_version.map
index 6e2ea84560ca..b8e258f4768d 100644
--- a/lib/librte_mbuf/rte_mbuf_version.map
+++ b/lib/librte_mbuf/rte_mbuf_version.map
@@ -35,3 +35,11 @@ DPDK_16.11 {
 	rte_get_tx_ol_flag_list;
 
 } DPDK_2.1;
+
+DPDK_18.02 {
+	global:
+
+	rte_mbuf_platform_mempool_ops;
+	rte_mbuf_register_platform_mempool_ops;
+
+} DPDK_16.11;
-- 
2.14.3

